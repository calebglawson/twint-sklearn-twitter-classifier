'''This script takes in the model generated by gather_data.py
    and makes preditions with new data from gather_data.py.'''

import argparse
import sqlite3
from pathlib import Path
from joblib import load
import pandas as pd


def load_model(model):
    '''Load the model from the disk.'''

    model = load(model)
    return model


def fetch_data(database):
    '''Fetch the data for predictions.'''

    conn = sqlite3.connect(database)
    dataframe = pd.read_sql_query("select * from user_stats;", conn)

    df_bkp = dataframe
    dataframe = dataframe[['following_watchlist', 'watchlist_completion', 'likes_watchlist',
                           'retweets_watchlist', 'mentions_watchlist', 'watchword_in_bio']]

    conn.close()

    return dataframe, df_bkp


def get_predictions(dataframe, model):
    '''Perform predictions against the data.'''

    pred = model.predict(dataframe)
    proba = model.predict_proba(dataframe)[:, 1]

    return pred, proba


def write_excel(path, dataframe, worksheet, mode):
    '''Write data frame to Excel.'''

    if not dataframe.empty:
        # https://github.com/PyCQA/pylint/issues/3060 pylint: disable=abstract-class-instantiated
        writer = pd.ExcelWriter(path, mode=mode)
        dataframe.to_excel(writer, worksheet)
        writer.save()


def output_results(df_bkp, pred, proba, output):
    '''Output the results to a file.'''

    results = pd.DataFrame(df_bkp)
    results["pred"] = pred
    results["proba"] = proba
    results = results.sort_values(
        by=['proba'], ascending=False)

    write_excel(output, results, "predictions", "w")

    if not results.empty:
        print(f"Predictions saved to: {output}")
    else:
        print("No results to output.")


def fetch_args():
    '''Fetch the args.'''

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "database", help="name of the db holding the twitter user stats")
    parser.add_argument(
        "model", help="filename of the joblibbed model")

    args = parser.parse_args()

    return args


def massage(args):
    '''Massage the args.'''

    args.output = Path(args.database).stem
    folder = Path(f"./{args.output}/")
    args.output = folder / f"{args.output}_predictions.xlsx"

    return args


def run(args):
    '''Main func.'''
    args = massage(args)
    dataframe, df_bkp = fetch_data(args.database)
    model = load_model(args.model)
    pred, proba = get_predictions(dataframe, model)
    output_results(df_bkp, pred, proba, args.output)


# MAIN
if __name__ == "__main__":
    ARGS = fetch_args()
    ARGS = massage(ARGS)
    run(ARGS)
