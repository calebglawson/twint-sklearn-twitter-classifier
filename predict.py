'''This script takes in the model generated by gather_data.py
    and makes preditions with new data from gather_data.py.'''

import argparse
import sqlite3
from joblib import load
import pandas as pd


def load_model(model):
    '''Load the model from the disk.'''

    model = load(model)
    return model


def fetch_data(database):
    '''Fetch the data for predictions.'''

    conn = sqlite3.connect(database)
    dataframe = pd.read_sql_query("select * from user_stats;", conn)

    df_bkp = dataframe
    dataframe = dataframe[['following_watchlist', 'watchlist_completion', 'likes_watchlist',
                           'retweets_watchlist', 'mentions_watchlist', 'watchword_in_bio']]

    conn.close()

    return dataframe, df_bkp


def get_predictions(dataframe, model):
    '''Perform predictions against the data.'''

    pred = model.predict(dataframe)
    proba = model.predict_proba(dataframe)[:, 1]

    return pred, proba


def write_excel(path, dataframe, worksheet, mode):
    '''Write data frame to Excel.'''

    if not dataframe.empty:
        # https://github.com/PyCQA/pylint/issues/3060 pylint: disable=abstract-class-instantiated
        writer = pd.ExcelWriter(path, mode=mode)
        dataframe.to_excel(writer, worksheet)
        writer.save()


def output_results(df_bkp, pred, proba, output):
    '''Output the results to a file.'''

    results = pd.DataFrame(df_bkp)
    results["pred"] = pred
    results["proba"] = proba
    results = results.sort_values(
        by=['proba'], ascending=False)

    write_excel(output, results, "predictions", "w")

    if not results.empty:
        print("Predictions saved to: " + output)
    else:
        print("No results to output.")

# MAIN


PARSER = argparse.ArgumentParser()

PARSER.add_argument(
    "database", help="name of the db holding the twitter user stats")
PARSER.add_argument(
    "model", help="filename of the joblibbed model")
PARSER.add_argument(
    "--output", help="filename of the predicted output", default="predictions")

ARGS = PARSER.parse_args()

if ".xlsx" not in ARGS.output:
    ARGS.output = ARGS.output + ".xlsx"

DF, DF_BKP = fetch_data(ARGS.database)
MODEL = load_model(ARGS.model)
PRED, PROBA = get_predictions(DF, MODEL)
output_results(DF_BKP, PRED, PROBA, ARGS.output)
